'''
Checks the per-image counts calculated by MulticlassSQL.
'''

import wx
import MulticlassSQL
import numpy
from DBConnect import *
from Properties import Properties
from DataModel import DataModel
from StringIO import StringIO


if __name__ == "__main__":
    from TrainingSet import TrainingSet
    from StringIO import StringIO
    import FastGentleBoostingMulticlass
    from DataGrid import DataGrid
    import wx

    app = wx.PySimpleApp()
    
    p = Properties.getInstance()
    db = DBConnect.getInstance()
    dm = DataModel.getInstance()
    
    testdata = [
                {'props'  : '../test_data/nirht_test.properties',
                 'ts'     : '../test_data/nirht_2class_test.txt',
                 'nRules' : 5,
                 'filter' : 'MAPs',
                 'vals'   : [[0L, 5L, 77, 0], [0L, 6L, 37, 0], [0L, 7L, 80, 0], [0L, 8L, 153, 1], [0L, 13L, 5, 0], [0L, 14L, 5, 0], [0L, 15L, 6, 0], [0L, 16L, 5, 0], [0L, 21L, 64, 3], [0L, 22L, 84, 6], [0L, 23L, 112, 7], [0L, 24L, 147, 10], [0L, 29L, 58, 5], [0L, 30L, 117, 3], [0L, 31L, 175, 6], [0L, 32L, 202, 6], [0L, 37L, 6, 0], [0L, 38L, 2, 1], [0L, 39L, 10, 0], [0L, 40L, 15, 0], [0L, 45L, 132, 9], [0L, 46L, 113, 4], [0L, 47L, 443, 24], [0L, 48L, 335, 10], [0L, 53L, 39, 4], [0L, 54L, 64, 3], [0L, 55L, 166, 7], [0L, 56L, 101, 3], [0L, 61L, 82, 7], [0L, 62L, 109, 11], [0L, 63L, 247, 16], [0L, 64L, 157, 8], [0L, 69L, 68, 4], [0L, 70L, 101, 13], [0L, 71L, 306, 35], [0L, 72L, 139, 20], [0L, 77L, 56, 1], [0L, 78L, 73, 5], [0L, 79L, 111, 4], [0L, 80L, 25, 1], [0L, 85L, 52, 11], [0L, 86L, 95, 20], [0L, 87L, 199, 37], [0L, 88L, 103, 16], [0L, 93L, 157, 2], [0L, 94L, 301, 10], [0L, 95L, 243, 20], [0L, 96L, 156, 5], [0L, 197L, 8, 0], [0L, 198L, 17, 3], [0L, 199L, 58, 2], [0L, 200L, 18, 0], [0L, 205L, 149, 5], [0L, 206L, 201, 13], [0L, 207L, 196, 7], [0L, 208L, 374, 21], [0L, 213L, 261, 9], [0L, 214L, 256, 11], [0L, 215L, 361, 17], [0L, 216L, 528, 23], [0L, 221L, 83, 5], [0L, 222L, 74, 2], [0L, 223L, 45, 8], [0L, 224L, 105, 2], [0L, 229L, 77, 6], [0L, 230L, 85, 5], [0L, 231L, 155, 15], [0L, 232L, 166, 24], [0L, 237L, 101, 3], [0L, 238L, 139, 1], [0L, 239L, 242, 21], [0L, 240L, 181, 8], [0L, 245L, 56, 8], [0L, 246L, 58, 0], [0L, 247L, 136, 1], [0L, 248L, 71, 3], [0L, 253L, 56, 0], [0L, 254L, 68, 0], [0L, 255L, 139, 7], [0L, 256L, 95, 9]]
                 },
                {'props'  : '../test_data/nirht_test.properties',
                 'ts'     : '../test_data/nirht_3class_test.txt',
                 'nRules' : 5,
                 'filter' : 'MAPs',
                 'vals'   : [[0L, 5L, 0, 77, 0], [0L, 6L, 0, 37, 0], [0L, 7L, 0, 80, 0], [0L, 8L, 1, 153, 0], [0L, 13L, 0, 5, 0], [0L, 14L, 0, 5, 0], [0L, 15L, 0, 6, 0], [0L, 16L, 0, 5, 0], [0L, 21L, 1, 65, 1], [0L, 22L, 3, 85, 2], [0L, 23L, 3, 114, 2], [0L, 24L, 11, 145, 1], [0L, 29L, 3, 59, 1], [0L, 30L, 2, 117, 1], [0L, 31L, 6, 175, 0], [0L, 32L, 2, 203, 3], [0L, 37L, 0, 6, 0], [0L, 38L, 1, 2, 0], [0L, 39L, 0, 10, 0], [0L, 40L, 0, 15, 0], [0L, 45L, 3, 132, 6], [0L, 46L, 2, 113, 2], [0L, 47L, 9, 444, 14], [0L, 48L, 5, 335, 5], [0L, 53L, 1, 40, 2], [0L, 54L, 1, 64, 2], [0L, 55L, 6, 166, 1], [0L, 56L, 1, 102, 1], [0L, 61L, 6, 81, 2], [0L, 62L, 7, 109, 4], [0L, 63L, 10, 248, 5], [0L, 64L, 7, 156, 2], [0L, 69L, 4, 68, 0], [0L, 70L, 6, 102, 6], [0L, 71L, 27, 306, 8], [0L, 72L, 15, 139, 5], [0L, 77L, 1, 56, 0], [0L, 78L, 4, 74, 0], [0L, 79L, 2, 112, 1], [0L, 80L, 1, 25, 0], [0L, 85L, 5, 53, 5], [0L, 86L, 14, 96, 5], [0L, 87L, 27, 199, 10], [0L, 88L, 11, 103, 5], [0L, 93L, 1, 157, 1], [0L, 94L, 6, 302, 3], [0L, 95L, 13, 242, 8], [0L, 96L, 3, 157, 1], [0L, 197L, 0, 8, 0], [0L, 198L, 2, 17, 1], [0L, 199L, 2, 58, 0], [0L, 200L, 0, 18, 0], [0L, 205L, 1, 150, 3], [0L, 206L, 8, 202, 4], [0L, 207L, 1, 199, 3], [0L, 208L, 17, 373, 5], [0L, 213L, 6, 261, 3], [0L, 214L, 6, 256, 5], [0L, 215L, 10, 361, 7], [0L, 216L, 17, 529, 5], [0L, 221L, 5, 82, 1], [0L, 222L, 1, 74, 1], [0L, 223L, 5, 45, 3], [0L, 224L, 3, 104, 0], [0L, 229L, 6, 76, 1], [0L, 230L, 4, 85, 1], [0L, 231L, 13, 156, 1], [0L, 232L, 15, 166, 9], [0L, 237L, 1, 102, 1], [0L, 238L, 1, 139, 0], [0L, 239L, 15, 243, 5], [0L, 240L, 5, 183, 1], [0L, 245L, 5, 57, 2], [0L, 246L, 0, 58, 0], [0L, 247L, 1, 136, 0], [0L, 248L, 1, 71, 2], [0L, 253L, 1, 55, 0], [0L, 254L, 0, 68, 0], [0L, 255L, 7, 139, 0], [0L, 256L, 3, 97, 4]]
                 },
                {'props'  : '../test_data/nirht_area_test.properties',
                 'ts'     : '../test_data/nirht_2class_test.txt',
                 'nRules' : 5,
                 'filter' : 'MAPs',
                 'vals'   : [[0L, 5L, 77, 0, 11966.0, 0.0], [0L, 6L, 37, 0, 6202.0, 0.0], [0L, 7L, 80, 0, 13530.0, 0.0], [0L, 8L, 153, 1, 23878.0, 194.0], [0L, 13L, 5, 0, 482.0, 0.0], [0L, 14L, 5, 0, 487.0, 0.0], [0L, 15L, 6, 0, 599.0, 0.0], [0L, 16L, 5, 0, 384.0, 0.0], [0L, 21L, 64, 3, 8749.0, 650.0], [0L, 22L, 84, 6, 9950.0, 897.0], [0L, 23L, 112, 7, 14401.0, 1530.0], [0L, 24L, 147, 10, 18174.0, 1885.0], [0L, 29L, 58, 5, 8033.0, 773.0], [0L, 30L, 117, 3, 15699.0, 307.0], [0L, 31L, 175, 6, 24165.0, 848.0], [0L, 32L, 202, 6, 28137.0, 906.0], [0L, 37L, 6, 0, 580.0, 0.0], [0L, 38L, 2, 1, 212.0, 134.0], [0L, 39L, 10, 0, 1118.0, 0.0], [0L, 40L, 15, 0, 1021.0, 0.0], [0L, 45L, 132, 9, 14159.0, 1183.0], [0L, 46L, 113, 4, 12974.0, 442.0], [0L, 47L, 443, 24, 49969.0, 3044.0], [0L, 48L, 335, 10, 36700.0, 1156.0], [0L, 53L, 39, 4, 4642.0, 381.0], [0L, 54L, 64, 3, 7130.0, 233.0], [0L, 55L, 166, 7, 18145.0, 982.0], [0L, 56L, 101, 3, 11114.0, 641.0], [0L, 61L, 82, 7, 10335.0, 842.0], [0L, 62L, 109, 11, 12948.0, 1210.0], [0L, 63L, 247, 16, 30129.0, 2510.0], [0L, 64L, 157, 8, 18761.0, 1058.0], [0L, 69L, 68, 4, 7085.0, 569.0], [0L, 70L, 101, 13, 10775.0, 1913.0], [0L, 71L, 306, 35, 31808.0, 5204.0], [0L, 72L, 139, 20, 15276.0, 2618.0], [0L, 77L, 56, 1, 8437.0, 272.0], [0L, 78L, 73, 5, 10765.0, 829.0], [0L, 79L, 111, 4, 17972.0, 714.0], [0L, 80L, 25, 1, 4103.0, 327.0], [0L, 85L, 52, 11, 6724.0, 1898.0], [0L, 86L, 95, 20, 13146.0, 3577.0], [0L, 87L, 199, 37, 28011.0, 6003.0], [0L, 88L, 103, 16, 14349.0, 2657.0], [0L, 93L, 157, 2, 17008.0, 252.0], [0L, 94L, 301, 10, 33214.0, 1527.0], [0L, 95L, 243, 20, 29356.0, 3237.0], [0L, 96L, 156, 5, 17710.0, 505.0], [0L, 197L, 8, 0, 1097.0, 0.0], [0L, 198L, 17, 3, 1858.0, 244.0], [0L, 199L, 58, 2, 6050.0, 248.0], [0L, 200L, 18, 0, 1697.0, 0.0], [0L, 205L, 149, 5, 14010.0, 585.0], [0L, 206L, 201, 13, 19544.0, 1475.0], [0L, 207L, 196, 7, 20297.0, 904.0], [0L, 208L, 374, 21, 38232.0, 2363.0], [0L, 213L, 261, 9, 32591.0, 1091.0], [0L, 214L, 256, 11, 29999.0, 1452.0], [0L, 215L, 361, 17, 45024.0, 2072.0], [0L, 216L, 528, 23, 62081.0, 3075.0], [0L, 221L, 83, 5, 9443.0, 489.0], [0L, 222L, 74, 2, 8244.0, 257.0], [0L, 223L, 45, 8, 4340.0, 690.0], [0L, 224L, 105, 2, 11838.0, 158.0], [0L, 229L, 77, 6, 11653.0, 1090.0], [0L, 230L, 85, 5, 12116.0, 1292.0], [0L, 231L, 155, 15, 23191.0, 3070.0], [0L, 232L, 166, 24, 25626.0, 4018.0], [0L, 237L, 101, 3, 11258.0, 416.0], [0L, 238L, 139, 1, 15288.0, 128.0], [0L, 239L, 242, 21, 29623.0, 2823.0], [0L, 240L, 181, 8, 21545.0, 1491.0], [0L, 245L, 56, 8, 6642.0, 883.0], [0L, 246L, 58, 0, 6796.0, 0.0], [0L, 247L, 136, 1, 15809.0, 114.0], [0L, 248L, 71, 3, 7926.0, 258.0], [0L, 253L, 56, 0, 9089.0, 0.0], [0L, 254L, 68, 0, 10564.0, 0.0], [0L, 255L, 139, 7, 20411.0, 1580.0], [0L, 256L, 95, 9, 14089.0, 1091.0]]
                 },
                {'props'  : '../test_data/nirht_area_test.properties',
                 'ts'     : '../test_data/nirht_3class_test.txt',
                 'nRules' : 5,
                 'filter' : 'MAPs',
                 'vals'   : [[0L, 5L, 0, 77, 0, 0.0, 11966.0, 0.0], [0L, 6L, 0, 37, 0, 0.0, 6202.0, 0.0], [0L, 7L, 0, 80, 0, 0.0, 13530.0, 0.0], [0L, 8L, 1, 153, 0, 194.0, 23878.0, 0.0], [0L, 13L, 0, 5, 0, 0.0, 482.0, 0.0], [0L, 14L, 0, 5, 0, 0.0, 487.0, 0.0], [0L, 15L, 0, 6, 0, 0.0, 599.0, 0.0], [0L, 16L, 0, 5, 0, 0.0, 384.0, 0.0], [0L, 21L, 1, 65, 1, 356.0, 8886.0, 157.0], [0L, 22L, 3, 85, 2, 421.0, 10080.0, 346.0], [0L, 23L, 3, 114, 2, 760.0, 14748.0, 423.0], [0L, 24L, 11, 145, 1, 1910.0, 18016.0, 133.0], [0L, 29L, 3, 59, 1, 403.0, 8257.0, 146.0], [0L, 30L, 2, 117, 1, 228.0, 15699.0, 79.0], [0L, 31L, 6, 175, 0, 848.0, 24165.0, 0.0], [0L, 32L, 2, 203, 3, 272.0, 28392.0, 379.0], [0L, 37L, 0, 6, 0, 0.0, 580.0, 0.0], [0L, 38L, 1, 2, 0, 134.0, 212.0, 0.0], [0L, 39L, 0, 10, 0, 0.0, 1118.0, 0.0], [0L, 40L, 0, 15, 0, 0.0, 1021.0, 0.0], [0L, 45L, 3, 132, 6, 311.0, 14168.0, 863.0], [0L, 46L, 2, 113, 2, 266.0, 12974.0, 176.0], [0L, 47L, 9, 444, 14, 980.0, 50124.0, 1909.0], [0L, 48L, 5, 335, 5, 502.0, 36714.0, 640.0], [0L, 53L, 1, 40, 2, 56.0, 4829.0, 138.0], [0L, 54L, 1, 64, 2, 68.0, 7130.0, 165.0], [0L, 55L, 6, 166, 1, 865.0, 18145.0, 117.0], [0L, 56L, 1, 102, 1, 262.0, 11367.0, 126.0], [0L, 61L, 6, 81, 2, 841.0, 10194.0, 142.0], [0L, 62L, 7, 109, 4, 849.0, 12948.0, 361.0], [0L, 63L, 10, 248, 5, 1735.0, 30204.0, 700.0], [0L, 64L, 7, 156, 2, 1008.0, 18643.0, 168.0], [0L, 69L, 4, 68, 0, 569.0, 7085.0, 0.0], [0L, 70L, 6, 102, 6, 814.0, 10993.0, 881.0], [0L, 71L, 27, 306, 8, 4096.0, 31808.0, 1108.0], [0L, 72L, 15, 139, 5, 2043.0, 15276.0, 575.0], [0L, 77L, 1, 56, 0, 272.0, 8437.0, 0.0], [0L, 78L, 4, 74, 0, 750.0, 10844.0, 0.0], [0L, 79L, 2, 112, 1, 261.0, 18319.0, 106.0], [0L, 80L, 1, 25, 0, 327.0, 4103.0, 0.0], [0L, 85L, 5, 53, 5, 1153.0, 6959.0, 510.0], [0L, 86L, 14, 96, 5, 2738.0, 13264.0, 721.0], [0L, 87L, 27, 199, 10, 4546.0, 28011.0, 1457.0], [0L, 88L, 11, 103, 5, 1896.0, 14349.0, 761.0], [0L, 93L, 1, 157, 1, 117.0, 17008.0, 135.0], [0L, 94L, 6, 302, 3, 880.0, 33531.0, 330.0], [0L, 95L, 13, 242, 8, 2557.0, 29039.0, 997.0], [0L, 96L, 3, 157, 1, 302.0, 17779.0, 134.0], [0L, 197L, 0, 8, 0, 0.0, 1097.0, 0.0], [0L, 198L, 2, 17, 1, 145.0, 1858.0, 99.0], [0L, 199L, 2, 58, 0, 248.0, 6050.0, 0.0], [0L, 200L, 0, 18, 0, 0.0, 1697.0, 0.0], [0L, 205L, 1, 150, 3, 110.0, 14122.0, 363.0], [0L, 206L, 8, 202, 4, 1073.0, 19662.0, 284.0], [0L, 207L, 1, 199, 3, 151.0, 20736.0, 314.0], [0L, 208L, 17, 373, 5, 2020.0, 38171.0, 404.0], [0L, 213L, 6, 261, 3, 783.0, 32591.0, 308.0], [0L, 214L, 6, 256, 5, 818.0, 29999.0, 634.0], [0L, 215L, 10, 361, 7, 1332.0, 45024.0, 740.0], [0L, 216L, 17, 529, 5, 2422.0, 62255.0, 479.0], [0L, 221L, 5, 82, 1, 544.0, 9318.0, 70.0], [0L, 222L, 1, 74, 1, 131.0, 8244.0, 126.0], [0L, 223L, 5, 45, 3, 453.0, 4340.0, 237.0], [0L, 224L, 3, 104, 0, 222.0, 11774.0, 0.0], [0L, 229L, 6, 76, 1, 1141.0, 11498.0, 104.0], [0L, 230L, 4, 85, 1, 991.0, 12116.0, 301.0], [0L, 231L, 13, 156, 1, 2856.0, 23260.0, 145.0], [0L, 232L, 15, 166, 9, 2192.0, 25686.0, 1766.0], [0L, 237L, 1, 102, 1, 160.0, 11405.0, 109.0], [0L, 238L, 1, 139, 0, 128.0, 15288.0, 0.0], [0L, 239L, 15, 243, 5, 2110.0, 29716.0, 620.0], [0L, 240L, 5, 183, 1, 991.0, 21901.0, 144.0], [0L, 245L, 5, 57, 2, 620.0, 6708.0, 197.0], [0L, 246L, 0, 58, 0, 0.0, 6796.0, 0.0], [0L, 247L, 1, 136, 0, 114.0, 15809.0, 0.0], [0L, 248L, 1, 71, 2, 73.0, 7926.0, 185.0], [0L, 253L, 1, 55, 0, 119.0, 8970.0, 0.0], [0L, 254L, 0, 68, 0, 0.0, 10564.0, 0.0], [0L, 255L, 7, 139, 0, 1530.0, 20461.0, 0.0], [0L, 256L, 3, 97, 4, 321.0, 14273.0, 586.0]]
                 },
                ] 

    for test in testdata:
        props  = test['props']
        ts     = test['ts']
        nRules = test['nRules']
        filter = test['filter']
        vals   = test['vals']
        
        p.LoadFile(props)
        dm.PopulateModel()
        trainingSet = TrainingSet(p)
        trainingSet.Load(ts)
        output = StringIO()
        print 'Training classifier with '+str(nRules)+' rules...'
        weaklearners = FastGentleBoostingMulticlass.train(trainingSet.colnames,
                                                          nRules, trainingSet.label_matrix, 
                                                          trainingSet.values, output)
        table = MulticlassSQL.PerImageCounts(weaklearners, filter=filter)
        table.sort()
    
        labels = ['table', 'image'] + list(trainingSet.labels)
        if p.area_scoring_column:
            labels += list(trainingSet.labels)
    
        grid = DataGrid(numpy.array(table), labels, key_col_indices=[0,1])
        grid.Show()
        
        assert grid.grid.GetTable().data.tolist()==vals, "Test failed."

    app.MainLoop()
    